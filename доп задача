using System;
using System.Diagnostics;
using System.IO;

class Program
{
    // Нерекурсивная реализация
    static int NonRecursiveSumOfDigits(ulong number)
    {
        int sum = 0;
        while (number != 0)
        {
            sum += (int)(number % 10);
            number /= 10;
        }
        return sum;
    }

    // Рекурсивная реализация
    static int RecursiveSumOfDigits(ulong number)
    {
        if (number == 0)
            return 0;
        return (int)(number % 10) + RecursiveSumOfDigits(number / 10);
    }

    static void Main()
    {
        string inputPath = "input.txt"; // Путь к файлу с входными данными
        string outputPath = "output.txt"; // Путь к файлу для вывода результата

        // Чтение входных данных из файла
        string line = File.ReadAllText(inputPath);
        string[] numbersStr = line.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

        using (StreamWriter outputFile = new StreamWriter(outputPath))
        {
            outputFile.WriteLine("Алгоритм\t\tЗначения А\t\tВремя выполнения (мс)");

            Stopwatch stopwatch = new Stopwatch();

            foreach (string numberStr in numbersStr)
            {
                if (ulong.TryParse(numberStr, out ulong number))
                {
                    // Нерекурсивная реализация
                    stopwatch.Start();
                    int nonRecursiveResult = NonRecursiveSumOfDigits(number);
                    stopwatch.Stop();
                    outputFile.WriteLine($"Нерекурсивный\t{number}\t\t\t{stopwatch.Elapsed.TotalMilliseconds}");

                    // Рекурсивная реализация
                    stopwatch.Start();
                    int recursiveResult = RecursiveSumOfDigits(number);
                    stopwatch.Stop();
                    outputFile.WriteLine($"Рекурсивный\t{number}\t\t\t{stopwatch.Elapsed.TotalMilliseconds}");

                    // Можно также сравнить результаты, чтобы убедиться в правильности выполнения
                    if (nonRecursiveResult != recursiveResult)
                    {
                        outputFile.WriteLine($"Различие в результатах для числа {number}");
                    }
                }
                else
                {
                    outputFile.WriteLine($"Ошибка в чтении числа: {numberStr}");
                }
            }
        }
    }
}
12345 1234567890 123456789012345 12345678901234567890
