using System;
using System.IO;
using System.Collections.Generic; // Добавление этой строки для List<T>

public struct Car
{
    public string Brand; // Марка автомобиля
    public string LicensePlate; // Номерной знак
    public string OwnerLastName; // Фамилия владельца
    public int YearPurchased; // Год покупки
    public double Mileage; // Пробег

    public Car(string brand, string licensePlate, string ownerLastName, int yearPurchased, double mileage)
    {
        Brand = brand;
        LicensePlate = licensePlate;
        OwnerLastName = ownerLastName;
        YearPurchased = yearPurchased;
        Mileage = mileage;
    }
}

class Program
{
    static void Main()
    {
        string inputFilePath = "input.txt"; // Путь к входному файлу
        Car[] cars = ReadCarsFromFile(inputFilePath); // Чтение данных об автомобилях из файла

        int specifiedYear = Convert.ToInt32(Console.ReadLine()); // Ввод пользователем указанного года
        Car[] filteredCars = FilterAndSortCars(cars, specifiedYear); // Фильтрация и сортировка автомобилей

        string outputFilePath = "output.txt"; // Путь к выходному файлу
        WriteCarsToFile(outputFilePath, filteredCars); // Запись отфильтрованных данных об автомобилях в файл
    }

    static Car[] ReadCarsFromFile(string filePath)
    {
        string[] lines = File.ReadAllLines(filePath); // Чтение всех строк из файла
        Car[] cars = new Car[lines.Length]; // Создание массива для хранения данных об автомобилях

        for (int i = 0; i < lines.Length; i++)
        {
            string[] data = lines[i].Split(';'); // Разделение строки на данные об автомобиле
            string brand = data[0]; // Извлечение марки автомобиля
            string licensePlate = data[1]; // Извлечение номерного знака
            string ownerLastName = data[2]; // Извлечение фамилии владельца
            int yearPurchased = int.Parse(data[3]); // Извлечение года покупки
            double mileage = double.Parse(data[4]); // Извлечение пробега
            Car car = new Car(brand, licensePlate, ownerLastName, yearPurchased, mileage); // Создание объекта Car
            cars[i] = car; // Добавление объекта Car в массив
        }

        return cars; // Возврат массива данных об автомобилях
    }

    static Car[] FilterAndSortCars(Car[] cars, int specifiedYear)
    {
        List<Car> filteredCars = new List<Car>(); // Создание списка для отфильтрованных данных

        foreach (Car car in cars)
        {
            if (car.YearPurchased < specifiedYear)
            {
                filteredCars.Add(car); // Добавление подходящего автомобиля в список
            }
        }

        for (int i = 1; i < filteredCars.Count; i++)
        {
            Car keyCar = filteredCars[i]; // Выбор автомобиля для сортировки
            int j = i - 1;

            while (j >= 0 && filteredCars[j].Mileage > keyCar.Mileage)
            {
                filteredCars[j + 1] = filteredCars[j]; // Сдвиг элементов для сортировки
                j = j - 1;
            }
            filteredCars[j + 1] = keyCar; // Вставка автомобиля на правильную позицию в списке
        }

        return filteredCars.ToArray(); // Преобразование списка в массив и возврат его
    }

    static void WriteCarsToFile(string filePath, Car[] cars)
    {
        using (StreamWriter writer = new StreamWriter(filePath)) // Использование StreamWriter для записи в файл
        {
            foreach (Car car in cars)
            {
                writer.WriteLine($"{car.Brand};{car.LicensePlate};{car.OwnerLastName};{car.YearPurchased};{car.Mileage}");
                // Запись данных об автомобиле в файл в формате "Марка;Номерной знак;Фамилия владельца;Год покупки;Пробег"
            }
        }

        Console.WriteLine("Данные успешно записаны в файл."); // Вывод сообщения об успешной записи данных в файл
    }
}
