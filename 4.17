using System;

namespace bimbimbambam{

class Program
{
    static void Main()
    {
        Rectangle rect = new Rectangle(5, 5);

        rect.PrintSides();
        Console.WriteLine($"Периметр: {rect.CalculatePerimeter()}");
        Console.WriteLine($"Площадь: {rect.CalculateArea()}");
        Console.WriteLine($"Это квадрат? {(rect ? "Да" : "Нет")}");

        rect.SideA = 6;
        rect.SideB = 4;
        Console.WriteLine("После изменения сторон:");
        rect.PrintSides();
        Console.WriteLine($"Доступ к сторонам по индексу: {rect[0]}, {rect[1]}");

        ++rect;
        Console.WriteLine("После инкремента:");
        rect.PrintSides();
        rect.SideA = 6;
        rect.SideB = 4;
        --rect; // Перегрузка оператора декремента
        Console.WriteLine("После декремента:");
        rect.PrintSides();
        rect.SideA = 6;
        rect.SideB = 4;
        Rectangle rectMultiplied = rect * 2;
        Console.WriteLine("После умножения на скаляр:");
        rectMultiplied.PrintSides();
    }
}
}





using System;

namespace bimbimbambam{

class Rectangle
{
    //!!!Поля: 

    private int a, b;
    
    
    //!!!Конструктор, позволяющий создать экземпляр класса с заданными длинами сторон. 
    
    
    
// Объявляем конструктор класса Rectangle, который принимает два аргумента sideA и sideB
        // Используем ключевое слово this() для вызова конструктора по умолчанию
        // Присваиваем значения аргументов sideA и sideB переменным a и b соответственно
    public Rectangle(int sideA, int sideB)
    {
        this.a = sideA;
        this.b = sideB;
    }

    
    //!!!Методы, позволяющие:



 // Объявляем метод PrintSides, который выводит на консоль значения переменных a и b
    public void PrintSides()
    {
        Console.WriteLine($"Длина стороны a: {a}, Длина стороны b: {b}");
    }
// Объявляем метод CalculatePerimeter, который возвращает периметр прямоугольника
        // Периметр равен удвоенной сумме сторон a и b
    public int CalculatePerimeter()
    {
        return 2 * (a + b);
    }
 // Объявляем метод CalculateArea, который возвращает площадь прямоугольника
        // Площадь равна произведению сторон a и b
    public int CalculateArea()
    {
        return a * b;
    }
    
    
    
    //!!!Свойства:
    
    
    
 // Объявляем свойство SideA, которое возвращает значение переменной a и устанавливает ее значение
    public int SideA
    {
        get { return a; }
        set { a = value; }
    }
// Объявляем свойство SideB, которое возвращает значение переменной b и устанавливает ее значение
    public int SideB
    {
        get { return b; }
        set { b = value; }
    }
// Объявляем свойство IsSquare, которое возвращает true, если сторона a равна стороне b, и false в противном случае
    public bool IsSquare => a == b;



//!!!Индексатор, позволяющий по индексу 0 обращаться к полю a, по индексу 1 – к полю b,
//!!!при других значениях индекса выдается сообщение об ошибке. 



// Объявляем индексатор, который позволяет получать и устанавливать значения сторон a и b по индексу
        // Если индекс равен 0, возвращаем значение переменной a
        // Если индекс равен 1, возвращаем значение переменной b
        // Если индекс не равен ни 0, ни 1, выводим сообщение об ошибке и возвращаем -1
    public int this[int index]
    {
        get
        {
            if (index == 0)
                return a;
            else if (index == 1)
                return b;
            else
            {
                Console.WriteLine("Ошибка: Недопустимый индекс!");
                return -1;
            }
        }
        set
        {
            if (index == 0)
                a = value;
            else if (index == 1)
                b = value;
            else
                Console.WriteLine("Ошибка: Недопустимый индекс!");
        }
    }


//!!!Перегрузку: 

    // Перегружаем оператор инкремента (++rect)
        // Увеличиваем значения сторон a и b на 1
        // Возвращаем измененный объект rect
    public static Rectangle operator ++(Rectangle rect)
    {
        Rectangle temp = new Rectangle(rect.a,rect.b);
        temp.a = rect.a + 1;
        temp.b = rect.b + 1;
        return temp;
    }

    // Перегружаем оператор декремента (--rect)
        // Уменьшаем значения сторон a и b на 1
        // Возвращаем измененный объект rect
    public static Rectangle operator --(Rectangle rect)
    {
        Rectangle temp = new Rectangle(rect.a,rect.b);
        temp.a = rect.a - 1;
        temp.b = rect.b - 1;
        return temp;
    }

    // Перегружаем оператор умножения (*)
        // Умножаем значения сторон a и b на скаляр
        // Возвращаем измененный объект rect
    public static Rectangle operator *(Rectangle rect, int scalar)
    {
        Rectangle temp = new Rectangle(rect.a,rect.b);
        temp.a *= scalar;
        temp.b *= scalar;
        return temp;
    }

    // Перегружаем константы true и false
        // Преобразуем объект rect в логическое значение, возвращая true, если сторона a равна стороне b, и false в противном случае
    public static implicit operator bool(Rectangle rect)
    {
        return rect.IsSquare;
    }
}
}
