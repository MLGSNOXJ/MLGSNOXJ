using System;
using System.IO;
using System.Collections.Generic;

public struct Car : IComparable<Car>
{
    public string Brand;
    public string LicensePlate;
    public string OwnerLastName;
    public int YearPurchased;
    public double Mileage;

    public Car(string brand, string licensePlate, string ownerLastName, int yearPurchased, double mileage)
    {
        this.Brand = brand;
        this.LicensePlate = licensePlate;
        this.OwnerLastName = ownerLastName;
        this.YearPurchased = yearPurchased;
        this.Mileage = mileage;
    }

    public int CompareTo(Car otherCar)
    {
        if (this.Mileage < otherCar.Mileage)
        {
            return -1;
        }
        else if (this.Mileage > otherCar.Mileage)
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
}

class Program
{
    static void Main()
    {
        string inputFilePath = "input.txt";
        Car[] cars = ReadCarsFromFile(inputFilePath);

        int specifiedYear = Convert.ToInt32(Console.ReadLine());
        Car[] filteredCars = FilterAndSortCars(cars, specifiedYear);

        string outputFilePath = "output.txt";
        WriteCarsToFile(outputFilePath, filteredCars);
    }

    static Car[] ReadCarsFromFile(string filePath)
    {
        string[] lines = File.ReadAllLines(filePath);
        Car[] cars = new Car[lines.Length];

        for (int i = 0; i < lines.Length; i++)
        {
            string[] data = lines[i].Split(';');
            string brand = data[0];
            string licensePlate = data[1];
            string ownerLastName = data[2];
            int yearPurchased = int.Parse(data[3]);
            double mileage = double.Parse(data[4]);
            Car car = new Car(brand, licensePlate, ownerLastName, yearPurchased, mileage);
            cars[i] = car;
        }

        return cars;
    }

    static Car[] FilterAndSortCars(Car[] cars, int specifiedYear)
    {
        List<Car> filteredCars = new List<Car>();

        foreach (Car car in cars)
        {
            if (car.YearPurchased < specifiedYear)
            {
                filteredCars.Add(car);
            }
        }

        filteredCars.Sort(); // Сортировка автомобилей по пробегу с помощью CompareTo

        return filteredCars.ToArray();
    }

    static void WriteCarsToFile(string filePath, Car[] cars)
    {
        using (StreamWriter writer = new StreamWriter(filePath))
        {
            foreach (Car car in cars)
            {
                writer.WriteLine($"{car.Brand};{car.LicensePlate};{car.OwnerLastName};{car.YearPurchased};{car.Mileage}");
            }
        }

        Console.WriteLine("Данные успешно записаны в файл.");
    }
}
